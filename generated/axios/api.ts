// tslint:disable
/**
 * Moneybird OpenAPI spec
 * OpenAPI spec for Moneybird: https://developer.moneybird.com/
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Object for when creating contacts.
 * @export
 * @interface ContactCreate
 */
export interface ContactCreate {
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    company_name?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    firstname?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    lastname?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    address1?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    address2?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    zipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    delivery_method?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    customer_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    tax_number?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    chamber_of_commerce?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    bank_account?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ContactCreate
     */
    email_ubl?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    send_invoices_to_attention?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    send_invoices_to_email?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    send_estimates_to_attention?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    send_estimates_to_email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ContactCreate
     */
    sepa_active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    sepa_iban?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    sepa_iban_account_name?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    sepa_bic?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    sepa_mandate_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    sepa_mandate_date?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    sepa_sequence_type?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    invoice_workflow_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    estimate_workflow_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    si_identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactCreate
     */
    si_identifier_type?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ContactCreate
     */
    direct_debit?: boolean;
    /**
     * 
     * @type {Array<ContactCreateCustomFieldsAttributes>}
     * @memberof ContactCreate
     */
    custom_fields_attributes?: Array<ContactCreateCustomFieldsAttributes>;
}
/**
 * 
 * @export
 * @interface ContactCreateCustomFieldsAttributes
 */
export interface ContactCreateCustomFieldsAttributes {
    /**
     * 
     * @type {number}
     * @memberof ContactCreateCustomFieldsAttributes
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ContactCreateCustomFieldsAttributes
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface ContactRead
 */
export interface ContactRead {
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    administration_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    company_name?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    firstname?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    lastname?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    address1?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    address2?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    zipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    delivery_method?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    customer_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    tax_number?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    chamber_of_commerce?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    bank_account?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    attention?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ContactRead
     */
    email_ubl?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    send_invoices_to_attention?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    send_invoices_to_email?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    send_estimates_to_attention?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    send_estimates_to_email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ContactRead
     */
    sepa_active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    sepa_iban?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    sepa_iban_account_name?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    sepa_bic?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    sepa_mandate_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    sepa_mandate_date?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    sepa_sequence_type?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    credit_card_number?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    credit_card_reference?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    credit_card_type?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    tax_number_validated_at?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    tax_number_valid?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    invoice_workflow_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    estimate_workflow_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    si_identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    si_identifier_type?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    updated_at?: string;
    /**
     * 
     * @type {number}
     * @memberof ContactRead
     */
    version?: number;
    /**
     * 
     * @type {string}
     * @memberof ContactRead
     */
    sales_invoices_url?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ContactRead
     */
    notes?: Array<string>;
    /**
     * 
     * @type {Array<ContactReadCustomFields>}
     * @memberof ContactRead
     */
    custom_fields?: Array<ContactReadCustomFields>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ContactRead
     */
    events?: Array<string>;
}
/**
 * 
 * @export
 * @interface ContactReadCustomFields
 */
export interface ContactReadCustomFields {
    /**
     * 
     * @type {string}
     * @memberof ContactReadCustomFields
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactReadCustomFields
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactReadCustomFields
     */
    value?: string;
}

/**
 * ContactsApi - axios parameter creator
 * @export
 */
export const ContactsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new contact
         * @param {ContactCreate} [contactCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContact: async (contactCreate?: ContactCreate, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/contacts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication OAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof contactCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(contactCreate !== undefined ? contactCreate : {}) : (contactCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List contacts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContacts: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/contacts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiToken required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication OAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactsApi - functional programming interface
 * @export
 */
export const ContactsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new contact
         * @param {ContactCreate} [contactCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContact(contactCreate?: ContactCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ContactsApiAxiosParamCreator(configuration).createContact(contactCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List contacts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContacts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContactRead>>> {
            const localVarAxiosArgs = await ContactsApiAxiosParamCreator(configuration).getContacts(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ContactsApi - factory interface
 * @export
 */
export const ContactsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create a new contact
         * @param {ContactCreate} [contactCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContact(contactCreate?: ContactCreate, options?: any): AxiosPromise<void> {
            return ContactsApiFp(configuration).createContact(contactCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List contacts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContacts(options?: any): AxiosPromise<Array<ContactRead>> {
            return ContactsApiFp(configuration).getContacts(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactsApi - object-oriented interface
 * @export
 * @class ContactsApi
 * @extends {BaseAPI}
 */
export class ContactsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new contact
     * @param {ContactCreate} [contactCreate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public createContact(contactCreate?: ContactCreate, options?: any) {
        return ContactsApiFp(this.configuration).createContact(contactCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List contacts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public getContacts(options?: any) {
        return ContactsApiFp(this.configuration).getContacts(options).then((request) => request(this.axios, this.basePath));
    }

}


